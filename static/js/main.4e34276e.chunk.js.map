{"version":3,"sources":["components/Typography.js","components/ListItem.js","components/Toolbar.js","App.js","serviceWorker.js","index.js"],"names":["styles","header","fontSize","fontWeight","body","Typography","props","variant","style","children","listItem","width","margin","listItemContent","height","overflow","marginBottom","image","imageUrl","ListItem","src","alt","name","toolbar","backgroundColor","display","padding","logo","color","alignSelf","Toolbar","APIKEY","process","root","fontFamily","flex","content","flexWrap","App","useState","data","setData","useEffect","a","axios","get","results","console","log","fetchData","map","movie","key","id","title","poster_path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAEMA,EAAS,CACdC,OAAQ,CACPC,SAAU,GACVC,WAAY,KAEbC,KAAM,CACLF,SAAU,GACVC,WAAY,MAIC,SAASE,EAAWC,GAClC,IAAIC,EAEJ,OAAOD,EAAMC,SACZ,IAAK,SACJA,EAAU,SACV,MACD,IAAK,OACJA,EAAU,OACV,MACD,QACCA,EAAU,OAGZ,OACC,yBAAKC,MAAOR,EAAOO,IAAWD,EAAMG,UCxBtC,IAAMT,EAAS,CACdU,SAAU,CACNC,MAAO,IACPC,OAAQ,IAEZC,gBAAiB,CAChBC,OAAQ,IACRH,MAAO,IACPI,SAAU,SACVC,aAAc,IAEfC,MAAO,CACNH,OAAQ,SAIJI,EAAW,kCAEF,SAASC,EAASb,GAChC,OACC,yBAAKE,MAAOR,EAAOU,UACZ,yBAAKF,MAAOR,EAAOa,iBAClB,yBAAKL,MAAOR,EAAOiB,MAAOG,IAAKF,EAASZ,EAAMY,SAAUG,IAAK,MAE9D,kBAAChB,EAAD,CAAYE,QAAQ,QAAQD,EAAMgB,OC1B3C,IAAMtB,EAAS,CACduB,QAAS,CACLC,gBAAiB,QACjBV,OAAQ,GACRW,QAAS,OACTC,QAAS,YAEXC,KAAM,CACJC,MAAO,QACPC,UAAW,WAID,SAASC,EAAQxB,GAC/B,OACC,yBAAKE,MAAOR,EAAOuB,SACZ,yBAAKf,MAAOR,EAAO2B,MAClB,uBAAGnB,MAAOR,EAAO2B,MAAjB,UCbV,IAAMI,EAASC,mCAEThC,EAAS,CACbiC,KAAM,CACJC,WAAY,UAEd9B,KAAM,CACJ+B,KAAM,EACNT,QAAS,aAEXU,QAAS,CACPX,QAAS,OACTY,SAAU,SAkCCC,MA9Bf,WAAgB,IAAD,EACWC,qBADX,mBACNC,EADM,KACAC,EADA,KAYb,OATAC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,sEACMC,IAAMC,IAAN,8DAAiEd,EAAjE,0FADN,OACVe,EADU,OAEhBL,EAAQK,EAAQN,KAAKM,SACrBC,QAAQC,IAAIF,EAAQN,KAAKM,SAHT,2CAAH,qDAKfG,KACC,IAGD,yBAAKzC,MAAOR,EAAOiC,MACjB,kBAACH,EAAD,MACA,yBAAKtB,MAAOR,EAAOI,MACjB,yBAAKI,MAAOR,EAAOoC,SAChBI,GAAQA,EAAKU,KAAI,SAAAC,GAAK,OACrB,kBAAChC,EAAD,CACEiC,IAAKD,EAAME,GACX/B,KAAM6B,EAAMG,MACZpC,SAAUiC,EAAMI,qBC/BVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4e34276e.chunk.js","sourcesContent":["import React from 'react';\n\nconst styles = {\n\theader: {\n\t\tfontSize: 42,\n\t\tfontWeight: 500,\n\t},\n\tbody: {\n\t\tfontSize: 19,\n\t\tfontWeight: 400,\n\t}\n}\n\nexport default function Typography(props) {\n\tlet variant;\n\n\tswitch(props.variant) {\n\t\tcase \"header\":\n\t\t\tvariant = 'header';\n\t\t\tbreak;\n\t\tcase \"body\":\n\t\t\tvariant = 'body';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tvariant = 'body';\n\t} \n\t\n\treturn (\n\t\t<div style={styles[variant]}>{props.children}</div>\n\t)\n}\n\n","import React from 'react';\n\nimport Typography from './Typography';\n\nconst styles = {\n\tlistItem: {\n\t    width: 200,\n\t    margin: 10,\n\t},\n\tlistItemContent: {\n\t\theight: 300,\n\t\twidth: 200,\n\t\toverflow: 'hidden',\n\t\tmarginBottom: 10,\n\t},\n\timage: {\n\t\theight: '100%',\n\t}\n}\n\nconst imageUrl = 'https://image.tmdb.org/t/p/w500'\n\nexport default function ListItem(props) {\n\treturn (\n\t\t<div style={styles.listItem}>\n\t        <div style={styles.listItemContent}>\n\t        \t<img style={styles.image} src={imageUrl+props.imageUrl} alt={''}/>\n\t        </div>\n\t        <Typography variant=\"body\">{props.name}</Typography>\n        </div>\n\t)\n}\n\n","import React from 'react';\n\nconst styles = {\n\ttoolbar: {\n\t    backgroundColor: 'black',\n\t    height: 60,\n\t    display: 'flex',\n\t    padding: '5px 25px',\n\t},\n\t  logo: {\n\t    color: 'white',\n\t    alignSelf: 'center',\n\t},\n}\n\nexport default function Toolbar(props) {\n\treturn (\n\t\t<div style={styles.toolbar}>\n\t        <div style={styles.logo}>\n\t\t        <p style={styles.logo}>TIFF</p>\n\t\t    </div>\n\t    </div>\n\t)\n}\n\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport ListItem from './components/ListItem';\nimport Toolbar from './components/Toolbar';\n\nconst APIKEY = process.env.REACT_APP_API_KEY;\n\nconst styles = {\n  root: {\n    fontFamily: \"Roboto\"\n  },\n  body: {\n    flex: 1,\n    padding: '20px 40px',\n  },\n  content: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  }\n}\n\nfunction App() {\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    const fetchData = async() => {\n      const results = await axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${APIKEY}&language=en-US&sort_by=release_date.desc&primary_release_year=2019&vote_count.gte=10`);\n      setData(results.data.results);\n      console.log(results.data.results)\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <div style={styles.root}>\n      <Toolbar />\n      <div style={styles.body}>\n        <div style={styles.content}>\n          {data && data.map(movie => (\n            <ListItem\n              key={movie.id} \n              name={movie.title}\n              imageUrl={movie.poster_path}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}